<?xml version="1.0" encoding="utf-8"?>

<robot name="mobile_rob_dev_sim" xmlns:xacro="http://www.ros.org/wiki/xacro">


  <!-- * * * Colors Definitions * * * -->
  <material name="black">
    <color rgba="0.0 0.0 0.0 1.0"/>
  </material>

  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>

  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>

  <material name="grey">
    <color rgba="0.7 0.7 0.7 1.0"/>
  </material>

  <material name="darkgrey">
    <color rgba="0.3 0.3 0.3 1.0"/>
  </material>

  <material name="orange">
    <color rgba="1.0 0.65 0.0 1.0"/>
  </material>

  <material name="brown">
    <color rgba="0.87 0.58 0.22 1.0"/>
  </material>

  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>

  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>

  <material name="yellow">
    <color rgba="0.8 0.8 0.0 1.0"/>
  </material>

  <!-- * * * Link Definitions * * * -->
  <!-- * * * Define World Link to fix the foot rail to the world * * * -->
  <!-- * * * World Map link * * * -->
  <!--link name="world"/-->
  <link name="map"/>
  <link name="odom"/>
  <!-- * * * base_link link * * * -->
  <link name="base_link">
    <inertial>
      <origin xyz="-0.00461487870734328 0.000366188243899251 0.111305202476825" rpy="0 0 0"/>
      <mass
      value="8.01860580709809"/>
      <inertia
      ixx="0.156639319017219"      ixy="1.11164438093558E-09"    ixz="-2.73458344436832E-06"
                                   iyy="0.170503040844609"       iyz="-3.90039384128734E-13"
                                                                 izz="0.273984906364084"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://mobile_rob_dev_sim/meshes/teste.stl"/>
      </geometry>
      <material name="red">
        <color rgba="0.8 0.0 0.0 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://mobile_rob_dev_sim/meshes/teste.stl"/>
      </geometry>
    </collision>
  </link>
  <!-- * * * From World to Map Joint * * * -->
  <!--   <joint name="fixed_world_to_map" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <parent link="world"/>
    <child link="map"/>
  </joint>  --> 
  <!-- * * * From Map to Odom Joint * * * -->
  <joint name="fixed_map_to_odom" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <parent link="map"/>
    <child link="odom"/>
  </joint>
  <!-- * * * From Odom to Base_Link Joint * * * -->
  <joint name="fixed_odom_to_base_link" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <parent link="odom"/>
    <child link="base_link"/>
  </joint>

  <!-- * * * left_wheel link * * * -->
  <link name="left_wheel">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.211162907036622"/>
      <inertia
        ixx="0.000475634940966531"  ixy="1.03328518564722E-21"  ixz="5.23183801417296E-19" 
                                    iyy="0.000931261531604138"  iyz="4.20387846548917E-21" 
                                                                izz="0.000475634940966532"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://mobile_rob_dev_sim/meshes/left_wheel.STL"/>
      </geometry>
      <material name="black">
        <color rgba="0.0 0.0 0.0 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://mobile_rob_dev_sim/meshes/left_wheel.STL"/>
      </geometry>
    </collision>
  </link>
  <!-- * * * left_wheel_joint * * * -->
  <joint name="left_wheel_joint" type="continuous">
    <origin xyz="0 0.25563 0.035863" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="left_wheel"/>
    <axis xyz="0 1 0"/>
  </joint>
  <!-- * * * left_wheel_transmission * * * -->
  <transmission name="left_wheel_transmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="left_wheel_joint">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="left_wheel_actuator">
      <mecanicalReduction>7</mecanicalReduction>
    </actuator>
  </transmission>

  <!-- * * * right_wheel link * * * -->
  <link name="right_wheel">
    <inertial>
      <!--origin xyz="1.11022302462516E-16 -1.38777878078145E-17 0" rpy="0 0 0"/-->
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.211162907036622"/>
      <inertia
        ixx="0.000475634940966534"  ixy="1.38722267285926E-22"  ixz="6.955139226144E-19" 
                                    iyy="0.000931261531604141"  iyz="4.2270223968197E-21" 
                                                                izz="0.000475634940966533"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://mobile_rob_dev_sim/meshes/right_wheel.STL"/>
      </geometry>
      <material name="black">
        <color rgba="0.0 0.0 0.0 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://mobile_rob_dev_sim/meshes/right_wheel.STL"/>
      </geometry>
    </collision>
  </link>
  <!-- * * * right_wheel_joint * * * -->
  <joint name="right_wheel_joint" type="continuous">
    <origin xyz="0 -0.25563 0.035863" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="right_wheel"/>
    <axis xyz="0 1 0"/>
  </joint>
  <!-- * * * right_wheel_transmission * * * -->
  <transmission name="right_wheel_transmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="right_wheel_joint">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="right_wheel_actuator">
      <mecanicalReduction>7</mecanicalReduction>
    </actuator>
  </transmission>
  <gazebo reference="base_link">
  <material>Gazebo/Red</material>
</gazebo>
<gazebo reference="left_wheel">
  <material>Gazebo/Black</material>
</gazebo>
 <gazebo reference="right_wheel">
  <material>Gazebo/Black</material>
</gazebo>

  <!-- * * * Gazebo Plugins Definitions * * * -->
  <!-- * * * differential_drive_controller * * * -->
  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>100</updateRate>
      <legacyMode>false</legacyMode>
      <leftJoint>left_wheel_joint</leftJoint>
      <rightJoint>right_wheel_joint</rightJoint>
      <wheelSeparation>0.50</wheelSeparation>
      <wheelDiameter>0.15</wheelDiameter>
      <torque>15</torque>
      <commandTopic>robot/cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_link</robotBaseFrame>
      <publishWheelTF>false</publishWheelTF>
      <publishWheelJointState>false</publishWheelJointState>
      <rosDebugLevel>na</rosDebugLevel>
      <wheelAcceleration>0</wheelAcceleration>
      <wheelTorque>15</wheelTorque>
      <odometrySource>world</odometrySource>
      <publishOdomTF>true</publishOdomTF>
      <publishTf>1</publishTf>
    </plugin>
  </gazebo>
   <!-- ============================================ -->
  <!--               Velodyne HDL-32E LiDAR         -->
  <!-- ============================================ -->
  <xacro:property name="M_PI" value="3.1415926535897931" />
  
  <!-- Inclua o xacro do Velodyne se estiver usando um arquivo separado -->
  <!-- <xacro:include filename="$(find velodyne_description)/urdf/HDL-32E.urdf.xacro" /> -->
  
  <!-- Ou adicione diretamente o modelo do Velodyne -->
  <joint name="velodyne_base_mount_joint" type="fixed">
    <origin xyz="0 0 0.18" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="velodyne_base_link"/>
  </joint> 

  <link name="velodyne_base_link">
    <inertial>
      <mass value="1.0"/>
      <origin xyz="0 0 0.07212"/>
      <inertia ixx="${(1.0 * (3.0*0.04267*0.04267 + 0.14424*0.14424)) / 12.0}" ixy="0" ixz="0"
        iyy="${(1.0 * (3.0*0.04267*0.04267 + 0.14424*0.14424)) / 12.0}" iyz="0"
        izz="${0.5 * 1.0 * (0.04267*0.04267)}"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://velodyne_description/meshes/HDL32E_base.dae" />
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0.07212"/>
      <geometry>
        <cylinder radius="0.04267" length="0.14424"/>
      </geometry>
    </collision>
  </link>

  <joint name="velodyne_base_scan_joint" type="fixed">
    <origin xyz="0 0 0.09081" rpy="0 0 0" />
    <parent link="velodyne_base_link" />
    <child link="velodyne"/>
  </joint>

  <link name="velodyne">
    <inertial>
      <mass value="0.01"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="1e-7" ixy="0" ixz="0" iyy="1e-7" iyz="0" izz="1e-7"/>
    </inertial>
    <visual>
      <origin xyz="0 0 -0.09081" rpy="0 0 0" />
      <geometry>
        <mesh filename="package://velodyne_description/meshes/HDL32E_scan.dae" />
      </geometry>
    </visual>
  </link>

  <!-- Gazebo plugin para o Velodyne HDL-32E -->
  <gazebo reference="velodyne">
    <sensor type="gpu_ray" name="velodyne-HDL32E">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>2187</samples>
            <resolution>1</resolution>
            <min_angle>-${M_PI}</min_angle>
            <max_angle>${M_PI}</max_angle>
          </horizontal>
          <vertical>
            <samples>16</samples>
            <resolution>1</resolution>
            <min_angle>-${5*M_PI/180.0}</min_angle>
            <max_angle> ${10*M_PI/180.0}</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.1</min>
          <max>131</max>
          <resolution>0.001</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.008</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_laser_controller" filename="libgazebo_ros_velodyne_gpu_laser.so">
        <topicName>/velodyne_points</topicName>
        <frameName>velodyne</frameName>
        <min_range>0.1</min_range>
        <max_range>130.0</max_range>
        <gaussianNoise>0.008</gaussianNoise>
      </plugin>
    </sensor>
  </gazebo>
</robot>
